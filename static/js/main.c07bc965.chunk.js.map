{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Title","styled","h1","TwoColumnLayout","div","Container","Input","input","PokemonRow","pokemon","onSelect","name","english","type","join","Button","variant","color","onClick","PokemonInfo","base","Object","keys","map","key","prototype","PropTypes","shape","string","HP","number","isRequired","Attack","Defense","Speed","App","useState","filter","setFilter","setPokemon","selectedItem","setSelectedItem","useEffect","fetch","then","resp","json","data","value","onChange","e","target","width","toLowerCase","includes","slice","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"4RAOMA,EAAQC,IAAOC,GAAV,mDAILC,EAAkBF,IAAOG,IAAV,2GAMfC,EAAYJ,IAAOG,IAAV,mFAMTE,EAAQL,IAAOM,MAAV,uFASLC,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,SAAX,OACjB,+BACE,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,OACvB,6BACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAKR,EAASD,IAAnE,0BAgBAU,EAAc,SAAC,GAAD,IAAER,EAAF,EAAEA,KAAMS,EAAR,EAAQA,KAAR,OAClB,gCACE,6BAAKT,EAAKC,UACV,gCAEIS,OAAOC,KAAKF,GAAMG,KAAI,SAAAC,GAAG,OACvB,+BACE,6BAAKA,IACL,6BAAKJ,EAAKI,OAFHA,YAUnBL,EAAYM,UAAY,CACtBd,KAAMe,IAAUC,MAAM,CACpBf,QAASc,IAAUE,SAErBR,KAAMM,IAAUC,MAAM,CACpBE,GAAIH,IAAUI,OAAOC,WACrBC,OAAQN,IAAUI,OAAOC,WACzBE,QAASP,IAAUI,OAAOC,WAC1B,aAAcL,IAAUI,OAAOC,WAC/B,cAAeL,IAAUI,OAAOC,WAChCG,MAAOR,IAAUI,OAAOC,cAqDbI,MAhDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,mBAAS,IAF1B,mBAEN3B,EAFM,KAEG8B,EAFH,OAG2BH,mBAAS,MAHpC,mBAGNI,EAHM,KAGQC,EAHR,KAWb,OANAC,qBAAU,WACRC,MAAM,qDACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAIR,EAAWQ,QAC1B,IAGD,eAAC1C,EAAD,WACE,cAACL,EAAD,6BACA,eAACG,EAAD,WACE,gCACE,cAACG,EAAD,CACE0C,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAUY,EAAEC,OAAOH,UAEtC,wBAAOI,MAAM,OAAb,UACE,gCACE,+BACE,sCACA,2CAGJ,gCACG3C,EACA4B,QAAO,SAAC5B,GAAD,OAAYA,EAAQE,KAAKC,QAAQyC,cAAcC,SAASjB,EAAOgB,kBACtEE,MAAM,EAAG,IACThC,KAAI,SAAAd,GAAO,OACR,cAAC,EAAD,CACEA,QAASA,EAETC,SAAU,SAACD,GAAD,OAAagC,EAAgBhC,KADlCA,EAAQ+C,eAQrBhB,GAAgB,cAAC,EAAD,eAAiBA,WClH9BiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c07bc965.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport styled  from '@emotion/styled';\nimport Button from '@mui/material/Button';\n\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst TwoColumnLayout = styled.div`\n  display: grid;\n  grid-template-columns: 70% 30%;\n  grid-column-gap: 1rem;\n`;\n\nconst Container = styled.div`\n  margin: auto;\n  width: 800px;\n  paddingTop: 1rem;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  font-size: x-large;\n  padding: 0.2rem;\n`;\n\n\n\n\nconst PokemonRow = ({pokemon, onSelect}) => (\n  <tr>\n    <td>{pokemon.name.english}</td>\n    <td>{pokemon.type.join(',')}</td>\n    <td>\n      <Button variant=\"contained\" color=\"primary\" onClick={()=> onSelect(pokemon)}>Select</Button>\n    </td>\n  </tr>\n)\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.shape({\n      english: PropTypes.string\n    }),\n    type: PropTypes.arrayOf(PropTypes.string)\n  }),\n  onSelect:PropTypes.func\n}\n\n\nconst PokemonInfo = ({name, base}) => (\n  <div>\n    <h1>{name.english}</h1>\n    <table>\n      {\n        Object.keys(base).map(key => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{base[key]}</td>\n          </tr>  \n        ))\n      }\n    </table>\n  </div>\n)\n\nPokemonInfo.prototype = {\n  name: PropTypes.shape({\n    english: PropTypes.string\n  }),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp. Attack\": PropTypes.number.isRequired,\n    \"Sp. Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n\n  })\n}\n\nfunction App() {\n  const [filter, setFilter] = useState(\"\")\n  const [pokemon, setPokemon] = useState([])\n  const [selectedItem, setSelectedItem] = useState(null)\n\n  useEffect(() => {\n    fetch('http://localhost:3000/starting-react/pokemon.json')\n      .then(resp => resp.json())\n      .then(data => setPokemon(data))\n  }, [])\n\n  return (\n    <Container>\n      <Title>Pokemon Search</Title>\n      <TwoColumnLayout>\n        <div>\n          <Input \n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n          />\n          <table width=\"100%\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n              </tr>\n            </thead>\n            <tbody>\n              {pokemon\n              .filter((pokemon) =>pokemon.name.english.toLowerCase().includes(filter.toLowerCase()))\n              .slice(0, 20)\n              .map(pokemon => (\n                  <PokemonRow \n                    pokemon={pokemon} \n                    key={pokemon.id} \n                    onSelect={(pokemon) => setSelectedItem(pokemon)} \n                    />\n              ))}\n              \n              </tbody>\n          </table>\n        </div>\n          { selectedItem && <PokemonInfo {...selectedItem} /> }\n        </TwoColumnLayout>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}